# create default kv engineitem.
- name: Get kv engines
  ansible.builtin.uri:
    validate_certs: true
    method: GET
    url: "https://{{ vault_domain }}/v1/sys/mounts/{{ gitlab_group_name }}"
    status_code: [200, 400]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
  register: get_engines

- name: Create project kv engine
  ansible.builtin.uri:
    validate_certs: true
    url: "https://{{ vault_domain }}/v1/sys/mounts/{{ gitlab_group_name }}"
    method: POST
    status_code: [204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body:
      "type": "kv"
      "options":
        "version": 2
    body_format: json
  when: get_engines.status == 400

- name: Add sample secrets
  ansible.builtin.uri:
    validate_certs: true
    url: "https://{{ vault_domain }}/v1/{{ gitlab_group_name }}/data/{{ item }}"
    method: POST
    status_code: [200, 201, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body: "{{ lookup('ansible.builtin.template', 'sample.json.j2') | regex_replace(\"'\", '\"') | string }}"
    body_format: json
  with_items: ["dev", "test", "prod"]

- name: Create access policy
  ansible.builtin.uri:
    validate_certs: true
    url: "https://{{ vault_domain }}/v1/sys/policies/acl/{{ gitlab_group_name }}"
    method: POST
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body:
      "policy": "{{ lookup('ansible.builtin.template', 'project-policy.j2') | regex_replace(\"'\", '\"') | string }}"
    body_format: json
  
- name: Get GitLab Application ID
  ansible.builtin.uri:
    validate_certs: true
    url: "https://{{ vault_domain }}/v1/auth/oidc/config"
    method: GET
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
  register: oidc_config

- name: Create oidc role
  ansible.builtin.uri:
    validate_certs: true
    url: "https://{{ vault_domain }}/v1/auth/oidc/role/{{ gitlab_group_name }}"
    method: POST
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body: "{{ lookup('ansible.builtin.template', 'oidc_role.j2') | regex_replace(\"'\", '\"') | string }}"
    body_format: json

- name: Get AppRole Status
  ansible.builtin.uri:
    validate_certs: true
    method: GET
    url: "https://{{ vault_domain }}/v1/sys/auth/approle"
    status_code: [200, 400]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
  register: read_approle

- name: Enable AppRole auth method
  ansible.builtin.uri:
    validate_certs: true
    url: "https://{{ vault_domain }}/v1/sys/auth/approle"
    method: POST
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body:
      "type": "approle"
    body_format: json
  when: read_approle.status == 400    

- name: Create ESO SecretStore AppRole
  ansible.builtin.uri:
    validate_certs: true
    url: "https://{{ vault_domain }}/v1/auth/approle/role/eso_{{ gitlab_group_name }}"
    method: POST
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body:
      "token_policies":
        - "{{ gitlab_group_name }}"
      "token_ttl": "1h"
      "token_max_ttl": "4h"
    body_format: json

- name: Get RoleID for AppRole
  ansible.builtin.uri:
    validate_certs: true
    url: "https://{{ vault_domain }}/v1/auth/approle/role/eso_{{ gitlab_group_name }}/role-id"
    method: GET
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
  register: approle_roleid

- name: Generate a SecretID for the AppRole
  ansible.builtin.uri:
    validate_certs: true
    url: "https://{{ vault_domain }}/v1/auth/approle/role/eso_{{ gitlab_group_name }}/secret-id"
    method: POST
    status_code: [200, 204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
  register: approle_secretid

- name: Get AppRole RoleID
  ansible.builtin.debug:
    var: approle_roleid.json.data.role_id

- name: Get AppRole SecretID
  ansible.builtin.debug:
    var: approle_secretid.json.data.secret_id
